// <auto-generated />
using System;
//using Events.Data.Infrastructure;
using Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Events.Data.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20241001193857_AddUser")]
    partial class AddUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Events.Data.Core.Entity.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Event", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uuid");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<DateTime>("EventDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid?>("ImageId")
                    .HasColumnType("uuid");

                b.Property<string>("Location")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<int>("MaxParticipants")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("ImageId")
                    .IsUnique();

                b.ToTable("Events");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.EventParticipant", b =>
            {
                b.Property<Guid>("EventId")
                    .HasColumnType("uuid");

                b.Property<Guid>("ParticipantId")
                    .HasColumnType("uuid");

                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<DateTime>("RegistrationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("EventId", "ParticipantId");

                b.HasIndex("ParticipantId");

                b.ToTable("EventParticipants");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Image", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<Guid?>("EventId")
                    .HasColumnType("uuid");

                b.Property<string>("FilePath")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.HasKey("Id");

                b.ToTable("Images");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Participant", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("BirthDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Participants");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("User");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Event", b =>
            {
                b.HasOne("Events.Data.Core.Entity.Category", "Category")
                    .WithMany("Events")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Events.Data.Core.Entity.Image", "Image")
                    .WithOne("Event")
                    .HasForeignKey("Events.Data.Core.Entity.Event", "ImageId");

                b.Navigation("Category");

                b.Navigation("Image");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.EventParticipant", b =>
            {
                b.HasOne("Events.Data.Core.Entity.Event", "Event")
                    .WithMany("EventParticipants")
                    .HasForeignKey("EventId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Events.Data.Core.Entity.Participant", "Participant")
                    .WithMany("EventParticipants")
                    .HasForeignKey("ParticipantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Event");

                b.Navigation("Participant");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Participant", b =>
            {
                b.HasOne("Events.Data.Core.Entity.User", "User")
                    .WithMany("Participants")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Category", b =>
            {
                b.Navigation("Events");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Event", b =>
            {
                b.Navigation("EventParticipants");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Image", b =>
            {
                b.Navigation("Event")
                    .IsRequired();
            });

            modelBuilder.Entity("Events.Data.Core.Entity.Participant", b =>
            {
                b.Navigation("EventParticipants");
            });

            modelBuilder.Entity("Events.Data.Core.Entity.User", b =>
            {
                b.Navigation("Participants");
            });
#pragma warning restore 612, 618
        }
    }
}